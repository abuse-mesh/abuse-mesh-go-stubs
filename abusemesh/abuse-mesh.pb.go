// Code generated by protoc-gen-go. DO NOT EDIT.
// source: abuse-mesh.proto

package abusemesh

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// The type of update to a table
type TableEventType int32

const (
	// A new entity is added to the table
	TableEventType_TABLE_UPDATE_NEW TableEventType = 0
	// A existing entity was changed in the table
	TableEventType_TABLE_UPDATE_EDIT TableEventType = 1
	// A entity was deleted from the table
	TableEventType_TABLE_UPDATE_DELETE TableEventType = 2
)

var TableEventType_name = map[int32]string{
	0: "TABLE_UPDATE_NEW",
	1: "TABLE_UPDATE_EDIT",
	2: "TABLE_UPDATE_DELETE",
}
var TableEventType_value = map[string]int32{
	"TABLE_UPDATE_NEW":    0,
	"TABLE_UPDATE_EDIT":   1,
	"TABLE_UPDATE_DELETE": 2,
}

func (x TableEventType) String() string {
	return proto.EnumName(TableEventType_name, int32(x))
}
func (TableEventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type GetNodeRequest struct {
}

func (m *GetNodeRequest) Reset()                    { *m = GetNodeRequest{} }
func (m *GetNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNodeRequest) ProtoMessage()               {}
func (*GetNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type OfferSignatureRequest struct {
	Signature *PGPSignature `protobuf:"bytes,1,opt,name=signature" json:"signature,omitempty"`
}

func (m *OfferSignatureRequest) Reset()                    { *m = OfferSignatureRequest{} }
func (m *OfferSignatureRequest) String() string            { return proto.CompactTextString(m) }
func (*OfferSignatureRequest) ProtoMessage()               {}
func (*OfferSignatureRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *OfferSignatureRequest) GetSignature() *PGPSignature {
	if m != nil {
		return m.Signature
	}
	return nil
}

type NegotiateNeighborshipRequest struct {
}

func (m *NegotiateNeighborshipRequest) Reset()                    { *m = NegotiateNeighborshipRequest{} }
func (m *NegotiateNeighborshipRequest) String() string            { return proto.CompactTextString(m) }
func (*NegotiateNeighborshipRequest) ProtoMessage()               {}
func (*NegotiateNeighborshipRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type TableEventStreamRequest struct {
	// The id of the session for which a client want to get the event stream
	SessionId *UUID `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	// The event offset in the session the client requests
	Offset uint64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
}

func (m *TableEventStreamRequest) Reset()                    { *m = TableEventStreamRequest{} }
func (m *TableEventStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*TableEventStreamRequest) ProtoMessage()               {}
func (*TableEventStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *TableEventStreamRequest) GetSessionId() *UUID {
	if m != nil {
		return m.SessionId
	}
	return nil
}

func (m *TableEventStreamRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type OfferSignatureResponse struct {
}

func (m *OfferSignatureResponse) Reset()                    { *m = OfferSignatureResponse{} }
func (m *OfferSignatureResponse) String() string            { return proto.CompactTextString(m) }
func (*OfferSignatureResponse) ProtoMessage()               {}
func (*OfferSignatureResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

type NegotiateNeighborshipResponse struct {
	// The identifier for this session
	SessionId *UUID `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	// The amount of events a server has sent to the client
	EventCounter uint64 `protobuf:"varint,2,opt,name=event_counter,json=eventCounter" json:"event_counter,omitempty"`
}

func (m *NegotiateNeighborshipResponse) Reset()                    { *m = NegotiateNeighborshipResponse{} }
func (m *NegotiateNeighborshipResponse) String() string            { return proto.CompactTextString(m) }
func (*NegotiateNeighborshipResponse) ProtoMessage()               {}
func (*NegotiateNeighborshipResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *NegotiateNeighborshipResponse) GetSessionId() *UUID {
	if m != nil {
		return m.SessionId
	}
	return nil
}

func (m *NegotiateNeighborshipResponse) GetEventCounter() uint64 {
	if m != nil {
		return m.EventCounter
	}
	return 0
}

type TableEvent struct {
	// The unique id of this event
	EventId *UUID `protobuf:"bytes,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	// The id of the event before this one regarding the same entity
	// Is only set when `update_type` is EDIT or DELETE
	PreviousEvent *UUID `protobuf:"bytes,2,opt,name=previous_event,json=previousEvent" json:"previous_event,omitempty"`
	// The signature of `uuid` and `previous_event` signed with the same key as the entity
	EventSignature *PGPSignature  `protobuf:"bytes,3,opt,name=event_signature,json=eventSignature" json:"event_signature,omitempty"`
	UpdateType     TableEventType `protobuf:"varint,4,opt,name=update_type,json=updateType,enum=abusemesh.TableEventType" json:"update_type,omitempty"`
	// Types that are valid to be assigned to TableEntity:
	//	*TableEvent_Node
	//	*TableEvent_Neighbor
	//	*TableEvent_Report
	//	*TableEvent_ReportConfirmation
	//	*TableEvent_DelistRequests
	//	*TableEvent_DelistAcceptance
	TableEntity isTableEvent_TableEntity `protobuf_oneof:"table_entity"`
	// The event number of this event for the session between the server and client
	EventNumber uint64 `protobuf:"varint,11,opt,name=event_number,json=eventNumber" json:"event_number,omitempty"`
}

func (m *TableEvent) Reset()                    { *m = TableEvent{} }
func (m *TableEvent) String() string            { return proto.CompactTextString(m) }
func (*TableEvent) ProtoMessage()               {}
func (*TableEvent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

type isTableEvent_TableEntity interface {
	isTableEvent_TableEntity()
}

type TableEvent_Node struct {
	Node *Node `protobuf:"bytes,5,opt,name=node,oneof"`
}
type TableEvent_Neighbor struct {
	Neighbor *Neighbor `protobuf:"bytes,6,opt,name=neighbor,oneof"`
}
type TableEvent_Report struct {
	Report *Report `protobuf:"bytes,7,opt,name=report,oneof"`
}
type TableEvent_ReportConfirmation struct {
	ReportConfirmation *ReportConfirmation `protobuf:"bytes,8,opt,name=report_confirmation,json=reportConfirmation,oneof"`
}
type TableEvent_DelistRequests struct {
	DelistRequests *DelistRequest `protobuf:"bytes,9,opt,name=delist_requests,json=delistRequests,oneof"`
}
type TableEvent_DelistAcceptance struct {
	DelistAcceptance *DelistAcceptance `protobuf:"bytes,10,opt,name=delist_acceptance,json=delistAcceptance,oneof"`
}

func (*TableEvent_Node) isTableEvent_TableEntity()               {}
func (*TableEvent_Neighbor) isTableEvent_TableEntity()           {}
func (*TableEvent_Report) isTableEvent_TableEntity()             {}
func (*TableEvent_ReportConfirmation) isTableEvent_TableEntity() {}
func (*TableEvent_DelistRequests) isTableEvent_TableEntity()     {}
func (*TableEvent_DelistAcceptance) isTableEvent_TableEntity()   {}

func (m *TableEvent) GetTableEntity() isTableEvent_TableEntity {
	if m != nil {
		return m.TableEntity
	}
	return nil
}

func (m *TableEvent) GetEventId() *UUID {
	if m != nil {
		return m.EventId
	}
	return nil
}

func (m *TableEvent) GetPreviousEvent() *UUID {
	if m != nil {
		return m.PreviousEvent
	}
	return nil
}

func (m *TableEvent) GetEventSignature() *PGPSignature {
	if m != nil {
		return m.EventSignature
	}
	return nil
}

func (m *TableEvent) GetUpdateType() TableEventType {
	if m != nil {
		return m.UpdateType
	}
	return TableEventType_TABLE_UPDATE_NEW
}

func (m *TableEvent) GetNode() *Node {
	if x, ok := m.GetTableEntity().(*TableEvent_Node); ok {
		return x.Node
	}
	return nil
}

func (m *TableEvent) GetNeighbor() *Neighbor {
	if x, ok := m.GetTableEntity().(*TableEvent_Neighbor); ok {
		return x.Neighbor
	}
	return nil
}

func (m *TableEvent) GetReport() *Report {
	if x, ok := m.GetTableEntity().(*TableEvent_Report); ok {
		return x.Report
	}
	return nil
}

func (m *TableEvent) GetReportConfirmation() *ReportConfirmation {
	if x, ok := m.GetTableEntity().(*TableEvent_ReportConfirmation); ok {
		return x.ReportConfirmation
	}
	return nil
}

func (m *TableEvent) GetDelistRequests() *DelistRequest {
	if x, ok := m.GetTableEntity().(*TableEvent_DelistRequests); ok {
		return x.DelistRequests
	}
	return nil
}

func (m *TableEvent) GetDelistAcceptance() *DelistAcceptance {
	if x, ok := m.GetTableEntity().(*TableEvent_DelistAcceptance); ok {
		return x.DelistAcceptance
	}
	return nil
}

func (m *TableEvent) GetEventNumber() uint64 {
	if m != nil {
		return m.EventNumber
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TableEvent) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TableEvent_OneofMarshaler, _TableEvent_OneofUnmarshaler, _TableEvent_OneofSizer, []interface{}{
		(*TableEvent_Node)(nil),
		(*TableEvent_Neighbor)(nil),
		(*TableEvent_Report)(nil),
		(*TableEvent_ReportConfirmation)(nil),
		(*TableEvent_DelistRequests)(nil),
		(*TableEvent_DelistAcceptance)(nil),
	}
}

func _TableEvent_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TableEvent)
	// table_entity
	switch x := m.TableEntity.(type) {
	case *TableEvent_Node:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Node); err != nil {
			return err
		}
	case *TableEvent_Neighbor:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Neighbor); err != nil {
			return err
		}
	case *TableEvent_Report:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Report); err != nil {
			return err
		}
	case *TableEvent_ReportConfirmation:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReportConfirmation); err != nil {
			return err
		}
	case *TableEvent_DelistRequests:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DelistRequests); err != nil {
			return err
		}
	case *TableEvent_DelistAcceptance:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DelistAcceptance); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TableEvent.TableEntity has unexpected type %T", x)
	}
	return nil
}

func _TableEvent_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TableEvent)
	switch tag {
	case 5: // table_entity.node
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Node)
		err := b.DecodeMessage(msg)
		m.TableEntity = &TableEvent_Node{msg}
		return true, err
	case 6: // table_entity.neighbor
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Neighbor)
		err := b.DecodeMessage(msg)
		m.TableEntity = &TableEvent_Neighbor{msg}
		return true, err
	case 7: // table_entity.report
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Report)
		err := b.DecodeMessage(msg)
		m.TableEntity = &TableEvent_Report{msg}
		return true, err
	case 8: // table_entity.report_confirmation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReportConfirmation)
		err := b.DecodeMessage(msg)
		m.TableEntity = &TableEvent_ReportConfirmation{msg}
		return true, err
	case 9: // table_entity.delist_requests
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DelistRequest)
		err := b.DecodeMessage(msg)
		m.TableEntity = &TableEvent_DelistRequests{msg}
		return true, err
	case 10: // table_entity.delist_acceptance
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DelistAcceptance)
		err := b.DecodeMessage(msg)
		m.TableEntity = &TableEvent_DelistAcceptance{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TableEvent_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TableEvent)
	// table_entity
	switch x := m.TableEntity.(type) {
	case *TableEvent_Node:
		s := proto.Size(x.Node)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TableEvent_Neighbor:
		s := proto.Size(x.Neighbor)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TableEvent_Report:
		s := proto.Size(x.Report)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TableEvent_ReportConfirmation:
		s := proto.Size(x.ReportConfirmation)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TableEvent_DelistRequests:
		s := proto.Size(x.DelistRequests)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TableEvent_DelistAcceptance:
		s := proto.Size(x.DelistAcceptance)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*GetNodeRequest)(nil), "abusemesh.GetNodeRequest")
	proto.RegisterType((*OfferSignatureRequest)(nil), "abusemesh.OfferSignatureRequest")
	proto.RegisterType((*NegotiateNeighborshipRequest)(nil), "abusemesh.NegotiateNeighborshipRequest")
	proto.RegisterType((*TableEventStreamRequest)(nil), "abusemesh.TableEventStreamRequest")
	proto.RegisterType((*OfferSignatureResponse)(nil), "abusemesh.OfferSignatureResponse")
	proto.RegisterType((*NegotiateNeighborshipResponse)(nil), "abusemesh.NegotiateNeighborshipResponse")
	proto.RegisterType((*TableEvent)(nil), "abusemesh.TableEvent")
	proto.RegisterEnum("abusemesh.TableEventType", TableEventType_name, TableEventType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AbuseMesh service

type AbuseMeshClient interface {
	// Returns the Node data of the current node
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*Node, error)
	// With this call a client offers a signature of the identity to the server
	// This allows the server to increase its credibility
	OfferSignature(ctx context.Context, in *OfferSignatureRequest, opts ...grpc.CallOption) (*OfferSignatureResponse, error)
	// This call can be used by a client to request to a neighbor of this node
	NegotiateNeighborship(ctx context.Context, in *NegotiateNeighborshipRequest, opts ...grpc.CallOption) (*NegotiateNeighborshipResponse, error)
	// Opens a stream on which all table events of a node are published
	TableEventStream(ctx context.Context, in *TableEventStreamRequest, opts ...grpc.CallOption) (AbuseMesh_TableEventStreamClient, error)
}

type abuseMeshClient struct {
	cc *grpc.ClientConn
}

func NewAbuseMeshClient(cc *grpc.ClientConn) AbuseMeshClient {
	return &abuseMeshClient{cc}
}

func (c *abuseMeshClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/abusemesh.AbuseMesh/GetNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *abuseMeshClient) OfferSignature(ctx context.Context, in *OfferSignatureRequest, opts ...grpc.CallOption) (*OfferSignatureResponse, error) {
	out := new(OfferSignatureResponse)
	err := grpc.Invoke(ctx, "/abusemesh.AbuseMesh/OfferSignature", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *abuseMeshClient) NegotiateNeighborship(ctx context.Context, in *NegotiateNeighborshipRequest, opts ...grpc.CallOption) (*NegotiateNeighborshipResponse, error) {
	out := new(NegotiateNeighborshipResponse)
	err := grpc.Invoke(ctx, "/abusemesh.AbuseMesh/NegotiateNeighborship", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *abuseMeshClient) TableEventStream(ctx context.Context, in *TableEventStreamRequest, opts ...grpc.CallOption) (AbuseMesh_TableEventStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AbuseMesh_serviceDesc.Streams[0], c.cc, "/abusemesh.AbuseMesh/TableEventStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &abuseMeshTableEventStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AbuseMesh_TableEventStreamClient interface {
	Recv() (*TableEvent, error)
	grpc.ClientStream
}

type abuseMeshTableEventStreamClient struct {
	grpc.ClientStream
}

func (x *abuseMeshTableEventStreamClient) Recv() (*TableEvent, error) {
	m := new(TableEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for AbuseMesh service

type AbuseMeshServer interface {
	// Returns the Node data of the current node
	GetNode(context.Context, *GetNodeRequest) (*Node, error)
	// With this call a client offers a signature of the identity to the server
	// This allows the server to increase its credibility
	OfferSignature(context.Context, *OfferSignatureRequest) (*OfferSignatureResponse, error)
	// This call can be used by a client to request to a neighbor of this node
	NegotiateNeighborship(context.Context, *NegotiateNeighborshipRequest) (*NegotiateNeighborshipResponse, error)
	// Opens a stream on which all table events of a node are published
	TableEventStream(*TableEventStreamRequest, AbuseMesh_TableEventStreamServer) error
}

func RegisterAbuseMeshServer(s *grpc.Server, srv AbuseMeshServer) {
	s.RegisterService(&_AbuseMesh_serviceDesc, srv)
}

func _AbuseMesh_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AbuseMeshServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abusemesh.AbuseMesh/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AbuseMeshServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AbuseMesh_OfferSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfferSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AbuseMeshServer).OfferSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abusemesh.AbuseMesh/OfferSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AbuseMeshServer).OfferSignature(ctx, req.(*OfferSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AbuseMesh_NegotiateNeighborship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NegotiateNeighborshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AbuseMeshServer).NegotiateNeighborship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abusemesh.AbuseMesh/NegotiateNeighborship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AbuseMeshServer).NegotiateNeighborship(ctx, req.(*NegotiateNeighborshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AbuseMesh_TableEventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TableEventStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AbuseMeshServer).TableEventStream(m, &abuseMeshTableEventStreamServer{stream})
}

type AbuseMesh_TableEventStreamServer interface {
	Send(*TableEvent) error
	grpc.ServerStream
}

type abuseMeshTableEventStreamServer struct {
	grpc.ServerStream
}

func (x *abuseMeshTableEventStreamServer) Send(m *TableEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _AbuseMesh_serviceDesc = grpc.ServiceDesc{
	ServiceName: "abusemesh.AbuseMesh",
	HandlerType: (*AbuseMeshServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNode",
			Handler:    _AbuseMesh_GetNode_Handler,
		},
		{
			MethodName: "OfferSignature",
			Handler:    _AbuseMesh_OfferSignature_Handler,
		},
		{
			MethodName: "NegotiateNeighborship",
			Handler:    _AbuseMesh_NegotiateNeighborship_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TableEventStream",
			Handler:       _AbuseMesh_TableEventStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "abuse-mesh.proto",
}

func init() { proto.RegisterFile("abuse-mesh.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 655 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x61, 0x53, 0xda, 0x4c,
	0x10, 0xc7, 0xc1, 0x47, 0x51, 0x16, 0x8d, 0xf1, 0x7c, 0x90, 0x94, 0xd6, 0x0e, 0xa6, 0xd3, 0x29,
	0x63, 0x47, 0xa6, 0xb5, 0x63, 0x5f, 0xf4, 0x55, 0x51, 0x32, 0x42, 0xc7, 0x22, 0x13, 0xa1, 0x7d,
	0x99, 0x09, 0x64, 0x91, 0x74, 0xe4, 0x2e, 0xbd, 0xbb, 0x38, 0xe3, 0x67, 0xe8, 0xf7, 0xeb, 0xe7,
	0xe9, 0x70, 0x09, 0x90, 0x00, 0xda, 0xe9, 0xbb, 0xe4, 0x7f, 0xbf, 0xdd, 0xff, 0xde, 0xec, 0xde,
	0x82, 0xee, 0xf6, 0x43, 0x81, 0x27, 0x63, 0x14, 0xa3, 0x5a, 0xc0, 0x99, 0x64, 0x24, 0xaf, 0x94,
	0x89, 0x50, 0x2e, 0xcd, 0x0f, 0x4f, 0x06, 0x6c, 0x3c, 0x66, 0x34, 0x62, 0x4c, 0x1d, 0xb4, 0x4b,
	0x94, 0x6d, 0xe6, 0xa1, 0x8d, 0x3f, 0x43, 0x14, 0xd2, 0x6c, 0x43, 0xf1, 0x7a, 0x38, 0x44, 0x7e,
	0xe3, 0xdf, 0x52, 0x57, 0x86, 0x7c, 0x7a, 0x40, 0xce, 0x20, 0x2f, 0xa6, 0x9a, 0x91, 0xad, 0x64,
	0xab, 0x85, 0xd3, 0x52, 0x6d, 0x66, 0x51, 0xeb, 0x5c, 0x76, 0xe6, 0x21, 0x73, 0xd2, 0x7c, 0x09,
	0x2f, 0xda, 0x78, 0xcb, 0xa4, 0xef, 0x4a, 0x6c, 0xa3, 0x7f, 0x3b, 0xea, 0x33, 0x2e, 0x46, 0x7e,
	0x30, 0xf5, 0x73, 0xa1, 0xd4, 0x75, 0xfb, 0x77, 0x68, 0xdd, 0x23, 0x95, 0x37, 0x92, 0xa3, 0x3b,
	0x9e, 0x3a, 0xd6, 0x00, 0x04, 0x0a, 0xe1, 0x33, 0xea, 0xf8, 0x5e, 0x6c, 0xb9, 0x9b, 0xb0, 0xec,
	0xf5, 0x5a, 0x0d, 0x3b, 0x1f, 0x23, 0x2d, 0x8f, 0x1c, 0x40, 0x8e, 0x0d, 0x87, 0x02, 0xa5, 0xb1,
	0x56, 0xc9, 0x56, 0xd7, 0xed, 0xf8, 0xcf, 0x34, 0xe0, 0x60, 0xf1, 0x4a, 0x22, 0x60, 0x54, 0xa0,
	0x29, 0xe1, 0xf0, 0x91, 0xe2, 0x22, 0xe0, 0x9f, 0x4b, 0x78, 0x05, 0x3b, 0x38, 0xb9, 0x88, 0x33,
	0x60, 0x21, 0x95, 0xc8, 0xe3, 0x4a, 0xb6, 0x95, 0x78, 0x11, 0x69, 0xe6, 0xaf, 0x0d, 0x80, 0xf9,
	0x9d, 0xc9, 0x31, 0x6c, 0x45, 0x31, 0x8f, 0x3b, 0x6c, 0x2a, 0xa0, 0xe5, 0x91, 0x8f, 0xa0, 0x05,
	0x1c, 0xef, 0x7d, 0x16, 0x0a, 0x47, 0x69, 0xca, 0x60, 0x45, 0xc4, 0xce, 0x14, 0x8b, 0x3c, 0x3e,
	0xc3, 0x6e, 0xe4, 0x31, 0x6f, 0xe1, 0x7f, 0x4f, 0xb7, 0x50, 0x53, 0xfc, 0xec, 0x9f, 0x7c, 0x82,
	0x42, 0x18, 0x78, 0xae, 0x44, 0x47, 0x3e, 0x04, 0x68, 0xac, 0x57, 0xb2, 0x55, 0xed, 0xf4, 0x59,
	0x22, 0x7a, 0x7e, 0xa3, 0xee, 0x43, 0x80, 0x36, 0x44, 0xf4, 0xe4, 0x9b, 0xbc, 0x86, 0x75, 0xca,
	0x3c, 0x34, 0x36, 0x96, 0x6a, 0x9d, 0x4c, 0x5e, 0x33, 0x63, 0xab, 0x63, 0xf2, 0x1e, 0xb6, 0x68,
	0xdc, 0x04, 0x23, 0xa7, 0xd0, 0xfd, 0x24, 0x1a, 0x1f, 0x35, 0x33, 0xf6, 0x0c, 0x23, 0x6f, 0x21,
	0xc7, 0x31, 0x60, 0x5c, 0x1a, 0x9b, 0x2a, 0x60, 0x2f, 0x11, 0x60, 0xab, 0x83, 0x66, 0xc6, 0x8e,
	0x11, 0xd2, 0x81, 0xfd, 0xe8, 0xcb, 0x19, 0x30, 0x3a, 0xf4, 0xf9, 0xd8, 0x95, 0x3e, 0xa3, 0xc6,
	0x96, 0x8a, 0x3c, 0x5c, 0x8a, 0xbc, 0x48, 0x40, 0xcd, 0x8c, 0x4d, 0xf8, 0x92, 0x4a, 0x2e, 0x60,
	0xd7, 0xc3, 0x3b, 0x5f, 0x48, 0x87, 0x47, 0x33, 0x2b, 0x8c, 0xbc, 0xca, 0x66, 0x24, 0xb2, 0x35,
	0x14, 0x11, 0x0f, 0x75, 0x33, 0x63, 0x6b, 0x5e, 0x52, 0x10, 0xe4, 0x0b, 0xec, 0xc5, 0x49, 0xdc,
	0xc1, 0x00, 0x03, 0xe9, 0xd2, 0x01, 0x1a, 0xa0, 0xd2, 0x3c, 0x5f, 0x4a, 0x53, 0x9f, 0x21, 0xcd,
	0x8c, 0xad, 0x7b, 0x0b, 0x1a, 0x39, 0x82, 0x68, 0xd4, 0x1c, 0x1a, 0x8e, 0xfb, 0xc8, 0x8d, 0x82,
	0x1a, 0xbf, 0x82, 0xd2, 0xda, 0x4a, 0x3a, 0xd7, 0x60, 0x5b, 0x4e, 0x5a, 0xe5, 0x20, 0x95, 0xbe,
	0x7c, 0x38, 0xfe, 0x06, 0x5a, 0xba, 0x75, 0xe4, 0x7f, 0xd0, 0xbb, 0xf5, 0xf3, 0x2b, 0xcb, 0xe9,
	0x75, 0x1a, 0xf5, 0xae, 0xe5, 0xb4, 0xad, 0xef, 0x7a, 0x86, 0x14, 0x61, 0x2f, 0xa5, 0x5a, 0x8d,
	0x56, 0x57, 0xcf, 0x92, 0x12, 0xec, 0xa7, 0xe4, 0x86, 0x75, 0x65, 0x75, 0x2d, 0x7d, 0xed, 0xf4,
	0xf7, 0x1a, 0xe4, 0xeb, 0x93, 0xea, 0xbf, 0xa2, 0x18, 0x91, 0x33, 0xd8, 0x8c, 0x17, 0x0d, 0x49,
	0x0e, 0x4d, 0x7a, 0xf9, 0x94, 0x17, 0x47, 0x83, 0xf4, 0x40, 0x4b, 0x3f, 0x5d, 0x52, 0x49, 0x20,
	0x2b, 0x17, 0x55, 0xf9, 0xe8, 0x09, 0x22, 0x7e, 0xd6, 0x3f, 0xa0, 0xb8, 0xf2, 0xdd, 0x93, 0x37,
	0xa9, 0x81, 0x7b, 0x7c, 0x6d, 0x95, 0xab, 0x7f, 0x07, 0x63, 0xaf, 0x6b, 0xd0, 0x17, 0x17, 0x1c,
	0x31, 0x57, 0xbe, 0x9b, 0xd4, 0xf6, 0x2b, 0x17, 0x57, 0x32, 0xef, 0xb2, 0xfd, 0x9c, 0x5a, 0xdd,
	0x1f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x0f, 0xab, 0x85, 0x8a, 0xf2, 0x05, 0x00, 0x00,
}
